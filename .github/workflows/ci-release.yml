name: ci-release

on:
  push:
    tags:
      - "v*.*.*"

  # Allows you to run this workflow manually from the Actions tab.
  workflow_dispatch:

# Required for creating GitHub release.
permissions:
  contents: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  product_name: sVanilla

jobs:
  build-windows:
    name: build-windows
    runs-on: windows-2019
    timeout-minutes: 120

    strategy:
      matrix:
        build_type: [Release]
        install_path: [package/installed]
        asset_path: [package/asset]
        c_compiler: [cl]
        cpp_compiler: [cl]
        arch: [win64_msvc2019_64]
        platform: [x64]
        qt: [6.7.1]
        qt_modules: [qtwebengine qtwebchannel qtpositioning qtpdf qtimageformats qt5compat]

    steps:
      - name: Get clone
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Get cmake 
        uses: lukka/get-cmake@latest

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        id: runvcpkg
        with:
          vcpkgDirectory: '${{ github.workspace }}/ThirdParty/vcpkg'
          vcpkgJsonGlob: '${{ github.workspace }}/vcpkg-configuration.json'

      - name: Install Qt Official Build
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{matrix.qt}}
          target: desktop
          arch: ${{matrix.arch}}
          modules: ${{matrix.qt_modules}}
          cache: 'true'

      - name: Configure CMake
        run: >
          cmake -B ${{ github.workspace }}/build
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DCMAKE_INSTALL_PREFIX=${{ matrix.install_path }}
          -S ${{ github.workspace }}

      - name:  Build Project
        run: cmake --build ${{ github.workspace }}/build --config ${{ matrix.build_type }} --parallel --target all_build --
        
      - name:  Install Project
        run: cmake --build ${{ github.workspace }}/build --config ${{ matrix.build_type }} --target install --

      - name: Get current date
        id: date
        run: |
          $branchName = "${{ github.ref }}" -replace '^refs/heads/', ''
          if ($branchName -match '^v\d+\.\d+\.\d+$') {
            echo "ref_id=$branchName" >> $env:GITHUB_ENV
          } else {
            echo "ref_id=$(Get-Date -Format 'yyyy-MM-dd')" >> $env:GITHUB_ENV
          }

      - name: Zip Package
        run: |
          if (-Not (Test-Path ${{ matrix.asset_path }})) {
              New-Item -Path ${{ matrix.asset_path }} -ItemType Directory
          }
          Compress-Archive -Path ${{ matrix.install_path }}/bin/* -DestinationPath ${{ matrix.asset_path }}/${{ env.product_name}}_${{ env.ref_id}}_win64_protable.zip

      - name: Create .msi package
        run: |
          python.exe scripts/generator_install_manifest.py -d ${{ matrix.install_path }}/bin/ -o ${{ matrix.install_path }}/bin/manifest.json
          python.exe scripts/generator_wxs.py -i ${{ matrix.install_path }}/bin/
          candle.exe -nologo -out installer/ build/${{ env.product_name}}.wxs scripts/ui.wxs
          light.exe -nologo -out ${{ matrix.asset_path }}/${{ env.product_name}}_${{ env.ref_id}}_win64_installer.msi installer/${{ env.product_name}}.wixobj installer/ui.wixobj  -ext WixUIExtension
          Remove-Item -Path "${{ matrix.asset_path }}/${{ env.product_name}}_${{ env.ref_id}}_win64_installer.wixpdb" -Force
      
      - name: Calculate SHA256 checksums for each file
        run: |
          $Files = Get-ChildItem -File -Path "${{ matrix.asset_path }}/*"
          foreach ($File in $Files) {
              $Hash = Get-FileHash $File.FullName -Algorithm SHA256
              $HashFile = "${{ matrix.asset_path }}/$($File.Name).sha256"
              "$($Hash.Hash) *$($File.Name)" | Out-File -FilePath $HashFile
          }

      - name: Update GitHub Release
        uses: actions/upload-artifact@v4
        with:
          name: windows
          path: |
            ${{ matrix.asset_path }}/*.zip
            ${{ matrix.asset_path }}/*.sha256
            ${{ matrix.asset_path }}/*.msi

      - name: Upload Release Assets
        run: |
          $files = Get-ChildItem -Path ${{ matrix.asset_path }}/*;
          foreach ($file in $files) {
            Write-Output "Uploading $file"
            gh release upload ${{ github.ref_name }} "$($file.FullName)" --clobber
          }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-linux:
    name: build-linux
    runs-on: ubuntu-22.04
    timeout-minutes: 120

    strategy:
      matrix:
        build_type: [Release]
        install_path: [package/installed]
        asset_path: [package/asset]
        c_compiler: [gcc]
        cpp_compiler: [g++]
        qt: [6.7.1]

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - uses: lukka/get-cmake@latest

      - name: Install linuxdeploy
        uses: miurahr/install-linuxdeploy-action@v1
        with:
          plugins: qt appimage

      - name: Install Dependencies
        run: |
          sudo DEBIAN_FRONTEND=noninteractive apt-get update
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y libfcitx5-qt-dev tree

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        id: runvcpkg
        with:
          vcpkgDirectory: '${{ github.workspace }}/ThirdParty/vcpkg'
          vcpkgJsonGlob: '${{ github.workspace }}/vcpkg-configuration.json'

      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{matrix.qt}}
          target: desktop
          modules: 'qtwebengine qtwebchannel qtpositioning qtpdf qtimageformats qt5compat'
          cache: 'true'

      - name: Configure CMake
        run: >
          cmake -B ${{ github.workspace }}/build
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DCMAKE_INSTALL_PREFIX=${{ matrix.install_path }}
          -S ${{ github.workspace }}

      - name:  Build Project
        run: cmake --build ${{ github.workspace }}/build --config ${{ matrix.build_type }} --parallel --target all --
        
      - name:  Install Project
        run: cmake --build ${{ github.workspace }}/build --config ${{ matrix.build_type }} --target install --

      - name: Get current date
        id: date
        run: |
          branchName="${GITHUB_REF#refs/heads/}"
          if [[ "$branchName" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "ref_id=$branchName" >> $GITHUB_ENV
          else
            echo "ref_id=$(date +'%Y-%m-%d')" >> $GITHUB_ENV
          fi

      - name: tar  Package
        run: |
          mkdir -p ${{ matrix.asset_path }}
          tar -czvf ${{ matrix.asset_path }}/${{ env.product_name}}_${{ env.ref_id}}_x86_64.tar.gz -C ${{ matrix.install_path }}/bin .
          
      - name: 'Install dependencies'
        run: |
          sudo apt-get update
          sudo apt install desktop-file-utils libfuse2 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-render-util0 libxcb-xinerama0 libxcb-composite0 libxcb-cursor0 libxcb-damage0 libxcb-dpms0 libxcb-dri2-0 libxcb-dri3-0 libxcb-ewmh2 libxcb-glx0 libxcb-present0 libxcb-randr0 libxcb-record0 libxcb-render0 libxcb-res0 libxcb-screensaver0 libxcb-shape0 libxcb-shm0 libxcb-sync1 libxcb-util1 libxkbcommon-x11-0

      - name: 'Install linuxdeploy'
        run: |
          pwd
          wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          wget https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage
          wget https://github.com/linuxdeploy/linuxdeploy-plugin-appimage/releases/download/continuous/linuxdeploy-plugin-appimage-x86_64.AppImage
          chmod +x linuxdeploy-x86_64.AppImage
          chmod +x linuxdeploy-plugin-qt-x86_64.AppImage
          chmod +x linuxdeploy-plugin-appimage-x86_64.AppImage

      - name: 'Create AppImage'
        run: |
          sed -i 's|^Exec=.*|Exec=sVanilla|' ${{ matrix.install_path }}/bin/share/applications/sVanilla.desktop
          export LD_LIBRARY_PATH=${{ github.workspace }}/build/vcpkg_installed/x64-linux/lib:$LD_LIBRARY_PATH
          ./linuxdeploy-x86_64.AppImage --appdir ${{ matrix.install_path }}/${{ env.product_name}} -e ${{ matrix.install_path }}/bin/${{ env.product_name}} -i ${{ matrix.install_path }}/bin/share/icon/sVanilla.svg -d ${{ matrix.install_path }}/bin/share/applications/sVanilla.desktop --plugin qt --output appimage
          rm linuxdeploy-x86_64.AppImage
          rm linuxdeploy-plugin-qt-x86_64.AppImage
          rm linuxdeploy-plugin-appimage-x86_64.AppImage
          mv *.AppImage ${{ matrix.asset_path }}/${{ env.product_name }}_${{ env.ref_id }}-x86_64.AppImage ||:
          
      - name: Calculate SHA256 checksums for each file
        run: |
          cd  "${{ matrix.asset_path }}" || exit
          for file in *; do
              [ -f "$file" ] && sha256sum "$file" > "$file.sha256"
          done

      - name: Update GitHub Release
        uses: actions/upload-artifact@v4
        with:
          name: linux
          path: |
            ${{ matrix.asset_path }}/*.AppImage
            ${{ matrix.asset_path }}/*.sha256
            ${{ matrix.asset_path }}/*.tar.gz

      - name: Upload Release Assets
        run: |
          files=$(find ${{ matrix.asset_path }} -type f);
          for file in $files; do
            echo "Uploading $file"
            gh release upload "${{ github.ref_name }}" "$file" --clobber
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-macos:
      name: build-macos
      runs-on: macos-13
      timeout-minutes: 120

      strategy:
        matrix:
          build_type: [Release]
          install_path: [package/installed]
          asset_path: [package/asset]
          c_compiler: [clang]
          cpp_compiler: [clang++]
          qt: [6.7.1]
          qt_modules: [qtwebengine]

      steps:
        - uses: actions/checkout@v4
          with:
            submodules: true

        - uses: lukka/get-cmake@latest

        - name: Setup vcpkg
          uses: lukka/run-vcpkg@v11
          id: runvcpkg
          with:
            vcpkgDirectory: '${{ github.workspace }}/ThirdParty/vcpkg'
            vcpkgJsonGlob: '${{ github.workspace }}/vcpkg-configuration.json'

        - name: Install Qt
          uses: jurplel/install-qt-action@v4
          with:
            version: ${{ matrix.qt }}
            host: 'mac'
            target: desktop
            modules:  ${{ matrix.qt_modules }}
            cache: 'true'
            setup-python: 'false'

        - name: Configure CMake
          run: >
            cmake -B ${{ github.workspace }}/build
            -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
            -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
            -DCMAKE_INSTALL_PREFIX=${{ matrix.install_path }}
            -S ${{ github.workspace }}

        - name:  Build Project
          run: |
            export Qt6_DIR=${QT_ROOT_DIR}/lib
            cmake --build ${{ github.workspace }}/build --config ${{ matrix.build_type }} --parallel --target all --
          
        - name:  Install Project
          run: cmake --build ${{ github.workspace }}/build --config ${{ matrix.build_type }} --target install --

        - name: Get current date
          id: date
          run: |
            branchName="${GITHUB_REF#refs/heads/}"
            if [[ "$branchName" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "ref_id=$branchName" >> $GITHUB_ENV
            else
              echo "ref_id=$(date +'%Y-%m-%d')" >> $GITHUB_ENV
            fi

        - name: tar  Package
          run: |
            mkdir -p ${{ matrix.asset_path }}
            tar -czvf ${{ matrix.asset_path }}/${{ env.product_name}}_${{ env.ref_id}}_x86_64.tar.gz -C ${{ matrix.install_path }}/bin .

        - name: 'Create dmg'
          run: |
            python scripts/generator_install_manifest.py -d  ${{ matrix.install_path }}/sVanilla.app/Contents/MacOS -o  ${{ matrix.install_path }}/sVanilla.app/Contents/MacOS/manifest.json
            macdeployqt ${{ matrix.install_path }}/sVanilla.app -dmg
            mv ${{ matrix.install_path }}/*.dmg ${{ matrix.asset_path }}/${{ env.product_name }}_${{ env.ref_id }}-x86_64.dmg ||:
              
        - name: Calculate SHA256 checksums for each file
          run: |
            cd "${{ matrix.asset_path }}" || exit
            for file in *; do
                if [ -f "$file" ]; then
                    shasum -a 256 "$file" > "$file.sha256"
                fi
            done

        - name: Update GitHub Release
          uses: actions/upload-artifact@v4
          with:
            name: macos
            path: |
              ${{ matrix.asset_path }}/*.dmg
              ${{ matrix.asset_path }}/*.sha256
              ${{ matrix.asset_path }}/*.tar.gz

        - name: Upload Release Assets
          run: |
            files=$(find ${{ matrix.asset_path }} -type f);
            for file in $files; do
              echo "Uploading $file"
              gh release upload "${{ github.ref_name }}" "$file" --clobber
            done
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
